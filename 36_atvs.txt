--Atividade 1--
UPDATE DEBITOS
  SET SITUACAO_DEBITO = 'Atrasado'
	WHERE SITUACAO_DEBITO NOT IN ('Pago', 'Negociado')
	AND DATAVENCIMENTO <= CURRENT_DATE

--Atividade 2--
UPDATE DEBITOS
  SET SITUACAO_DEBITO = 'Pendente'
	WHERE SITUACAO_DEBITO NOT IN ('Pago')
	AND DATAVENCIMENTO > CURRENT_DATE

--Atividade 3--
UPDATE DEBITOS
  SET DATAVENCIMENTO = DATEADD(YEAR, -5, DATAVENCIMENTO)
	WHERE SITUACAO_DEBITO = 'Negociado'

--Atividade 4--
SELECT NOME, EMAIL, TELEFONE 
	FROM PESSOA

--Atividade 5--
SELECT NOME, PRECO_UNITARIO
FROM PRODUTO
WHERE PRECO_UNITARIO > 100

--Atividade 6--
SELECT *
FROM VENDA
WHERE data_venda = '2022-12-07'

--Atividade 7--
SELECT p.NOME, p.DATA_NASCIMENTO,
  EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO) AS IDADE
	FROM PESSOA p
	INNER JOIN FORNECEDOR f ON f.ID_PESSOA = p.ID_PESSOA
	INNER JOIN PRODUTO pr ON f.ID_FORNECEDOR = pr.ID_FORNECEDOR
	 WHERE pr.QUANTIDADE_ESTOQUE IS NULL

--Atividade 8--
SELECT p.NOME
	FROM DEBITOS d
	INNER JOIN CLIENTE c ON c.ID_CLIENTE = d.ID_CLIENTE
	INNER JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA
	 WHERE d.SITUACAO_DEBITO = 'Atrasado'

--Atividade 9--
Não precisa fazer

--Atividade 10--
SELECT FIRST 10
	p.ID_PESSOA, p.NOME, p.DATA_NASCIMENTO,
       SUM(CASE WHEN d.SITUACAO_DEBITO = 'Atrasado' THEN d.VALOR_TOTAL ELSE 0 END) AS total_debitos_vencidos,
       SUM(CASE WHEN d.SITUACAO_DEBITO = 'Pago' THEN d.VALOR_TOTAL ELSE 0 END) AS total_debitos_pagos
	FROM DEBITOS d
	INNER JOIN CLIENTE c ON d.ID_CLIENTE = c.ID_CLIENTE
	INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
	  GROUP BY p.ID_PESSOA, p.NOME, p.DATA_NASCIMENTO
	  ORDER BY total_debitos_vencidos DESC

--Outra forma de fazer a atividade 10 (auxílio da Lais)--
SELECT FIRST 10 c.ID_CLIENTE
, p.NOME
, EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO) AS IDADE
, COALESCE( (SELECT SUM(d.VALOR_TOTAL)
FROM DEBITOS d
WHERE d.ID_CLIENTE = c.ID_CLIENTE
AND d.DATAVENCIMENTO < CURRENT_DATE
AND D.SITUACAO_DEBITO IN ('Atrasado', 'Pendente')),0) AS debito_pendente
    , (SELECT SUM(d.VALOR_TOTAL)
FROM DEBITOS d
WHERE d.ID_CLIENTE = c.ID_CLIENTE
AND D.SITUACAO_DEBITO = 'Pago') AS debito_pago
FROM PESSOA p
INNER JOIN CLIENTE c ON C.ID_PESSOA = P.ID_PESSOA
ORDER BY 4 DESC

--Atividade 11--
UPDATE PRODUTO
  SET PRECO_UNITARIO = PRECO_UNITARIO * 1.10
	WHERE QUANTIDADE_ESTOQUE < 10

--Atividade 12--
Não precisa fazer

--Atividade 13--
UPDATE DEBITOS d
  SET d.SITUACAO_DEBITO = 'Pago'
	WHERE d.SITUACAO_DEBITO = 'Atrasado'
    AND EXISTS (
      SELECT *
      FROM PAGAMENTO p
      WHERE p.ID_DEBITO = d.ID_DEBITO)

--Atividade 14--
Não existe

--Atividade 15--
SELECT *
  FROM VENDA
	WHERE DATA_VENDA BETWEEN '2023-12-01' AND '2024-01-31'

--Atividade 16--
SELECT *
  FROM PRODUTO
	WHERE QUANTIDADE_ESTOQUE BETWEEN 5 AND 20

--Atividade 17--
SELECT *
  FROM PESSOA
	WHERE LEFT(NOME, 1) = 'A'
	
--Atividade 18--
SELECT *
  FROM PRODUTO p
	WHERE NOT EXISTS (
    SELECT 1
      FROM ITENSVENDA i
      INNER JOIN VENDA v ON i.ID_VENDA = v.ID_VENDA
      WHERE i.ID_PRODUTO = p.ID_PRODUTO
)

--Atividade 19--
SELECT p.* 
FROM PRODUTO p
INNER JOIN ITENSVENDA i ON p.ID_PRODUTO = i.ID_PRODUTO
INNER JOIN VENDA v ON i.ID_VENDA = v.ID_VENDA
INNER JOIN PESSOA ps ON v.ID_PESSOA = ps.ID_PESSOA
WHERE ps.NOME IN ('Carla Souza', 'Larissa Ferreira')

--Atividade 20--
SELECT p.*
  FROM PESSOA p
	WHERE p.ID_PESSOA IN (SELECT c.ID_PESSOA FROM CLIENTE c)
    OR p.ID_PESSOA IN (SELECT f.ID_PESSOA FROM FUNCIONARIO f)

--Atividade 21--
SELECT v.*,
       c.*,
       p.*,
       f.*
FROM VENDA v
INNER JOIN CLIENTE c ON v.ID_PESSOA = c.ID_PESSOA
INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
INNER JOIN FORMA_PAGAMENTO f ON v.ID_FORMA_PAGAMENTO = f.ID_FORMA_PAGAMENTO

--Atividade 22--
SELECT p.*, 
       i.*, 
       v.*
  FROM PRODUTO p
	INNER JOIN ITENSVENDA i ON p.ID_PRODUTO = i.ID_PRODUTO
	INNER JOIN VENDA v ON i.ID_VENDA = v.ID_VENDA
	  WHERE p.NOME = 'Placa de Captura'

--Atividade 23--
SELECT
  ps.NOME AS NOME_CLIENTE,
  (EXTRACT(YEAR FROM CURRENT_DATE) + 2 - EXTRACT(YEAR FROM ps.DATA_NASCIMENTO)) AS IDADE_CLIENTE_2025,
  f.ID_FORNECEDOR AS ID_FORNECEDOR
	FROM CLIENTE c
	LEFT JOIN PESSOA ps ON c.ID_PESSOA = ps.ID_PESSOA
	LEFT JOIN FORNECEDOR f ON f.ID_PESSOA = ps.ID_PESSOA
	LEFT JOIN PESSOA pf ON f.ID_PESSOA = pf.ID_PESSOA

--Atividade 24--
SELECT
    l.NOME AS NOME_LOGRADOURO,
    b.NOME AS NOME_BAIRRO,
    CASE WHEN p.ID_PESSOA IS NOT NULL THEN 'Pertence'
      ELSE 'Não pertence'
      END AS PERTENCE_A_PESSOA
		FROM LOGRADOURO l
		INNER JOIN BAIRRO b ON l.ID_BAIRRO = b.ID_BAIRRO
		LEFT JOIN ENDERECO e ON l.ID_LOGRADOURO = e.ID_LOGRADOURO
		LEFT JOIN PESSOA p ON e.ID_PESSOA = p.ID_PESSOA

--Atividade 25--
SELECT 
    p.NOME,
    p.PRECO_UNITARIO
  FROM PRODUTO p
	WHERE p.PRECO_UNITARIO > (SELECT AVG(PRECO_UNITARIO) FROM PRODUTO)

--Atividade 26--
SELECT 
    p.NOME AS NOME_CLIENTE,
    m.NOME AS NOME_MUNICIPIO,
    m.POPULACAO
  FROM CLIENTE c
	INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
	INNER JOIN VENDA v ON v.ID_PESSOA = p.ID_PESSOA
	INNER JOIN ENDERECO e ON p.ID_PESSOA = e.ID_PESSOA
	INNER JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
	  WHERE m.POPULACAO > 1000000

--Atividade 27--
SELECT F.ID_FORNECEDOR, p2.NOME, SUM(I.QUANTIDADE) AS total_vendido
  FROM FORNECEDOR F
	INNER JOIN PESSOA p2 ON F.ID_PESSOA = p2.ID_PESSOA
	INNER JOIN PRODUTO P ON F.ID_FORNECEDOR = P.ID_FORNECEDOR
	INNER JOIN ITENSVENDA I ON P.ID_PRODUTO = I.ID_PRODUTO
	GROUP BY F.ID_FORNECEDOR, p2.NOME

--Atividade 28--
SELECT p.NOME, h.VALOR_TOTAL
  FROM HISTORICO_COMPRAS_CLIENTE h
	INNER JOIN CLIENTE c ON h.ID_CLIENTE = c.ID_CLIENTE
	INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
	  WHERE h.VALOR_TOTAL > 500

--Atividade 29--
SELECT p.NOME AS pessoa, b.NOME AS bairro, m.NOME AS municipio, l.NOME AS rua
  FROM ENDERECO e
	INNER JOIN PESSOA p ON p.ID_PESSOA = e.ID_PESSOA
	INNER JOIN LOGRADOURO l ON e.ID_LOGRADOURO = l.ID_LOGRADOURO
	INNER JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
	INNER JOIN BAIRRO b ON e.ID_BAIRRO = b.ID_BAIRRO

--Atividade 30--
SELECT 
    p.NOME,
    p.PRECO_UNITARIO,
    ps.NOME AS NOME_FORNECEDOR
  FROM PRODUTO p
	INNER JOIN FORNECEDOR f ON p.ID_FORNECEDOR = f.ID_FORNECEDOR
	INNER JOIN PESSOA ps ON f.ID_PESSOA = ps.ID_PESSOA

--Atividade 31--
SELECT 
    p.NOME AS NOME_PRODUTO,
    p.QUANTIDADE_ESTOQUE
  FROM PRODUTO p
	ORDER BY p.QUANTIDADE_ESTOQUE DESC

--Atividade 32--
SELECT 
    v.ID_VENDA,
    v.VALOR_TOTAL
  FROM VENDA v
	ORDER BY 
    v.VALOR_TOTAL ASC

--Atividade 33--
SELECT *
  FROM PRODUTO p
	WHERE p.QUANTIDADE_ESTOQUE > (SELECT AVG(p.QUANTIDADE_ESTOQUE) FROM PRODUTO p)

--Atividade 34--
SELECT
    p.NOME AS NOME_PESSOA_1,
    p.TELEFONE AS TELEFONE,
    ps.NOME AS NOME_PESSOA_2
  FROM PESSOA p
	INNER JOIN PESSOA ps ON p.TELEFONE = ps.TELEFONE
	  WHERE p.ID_PESSOA <> ps.ID_PESSOA

--Atividade 35--
UPDATE PRODUTO p
SET p.PRECO_UNITARIO = p.PRECO_UNITARIO * 1.10
WHERE p.ID_FORNECEDOR IN (
    SELECT f.ID_FORNECEDOR
    FROM FORNECEDOR f
    INNER JOIN PESSOA ps ON f.ID_PESSOA = ps.ID_PESSOA
    INNER JOIN ENDERECO e ON ps.ID_PESSOA = e.ID_PESSOA
    INNER JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
    WHERE m.NOME = 'São Paulo'
)

--Atividade 36--
SELECT ID_VENDA
  FROM DEBITOS d
	WHERE d.SITUACAO_DEBITO = 'Negociado'
